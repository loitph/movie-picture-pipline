name: Frontend CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18.x'

jobs:
  lint-job:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
            ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Lint
      run: |
        cd frontend
        npm run lint

  test-job:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Using Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Caching node modules
      uses: actions/cache@v4
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
            ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Test Job
      run: |
        cd frontend
        npm run test

  build-job:
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Using Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Caching node modules
      uses: actions/cache@v4
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
            ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build Job
      run: |
        cd frontend
        export REACT_APP_MOVIE_API_URL=http://localhost:5000
        docker build --build-arg=REACT_APP_MOVIE_API_URL --tag frontend-movie-picture:latest .
        docker run -p 3000:3000 --name frontend-movie-picture -d frontend-movie-picture
