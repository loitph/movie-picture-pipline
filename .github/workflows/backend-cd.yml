name: Backend Continuous Deployment

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: '3.10'

jobs:
  linting-action:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Using Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Pipenv
      run: |
        cd backend
        pip install pipenv

    - name: Install dependencies
      run: |
        cd backend
        pipenv install --dev

    - name: Run Lint
      run: |
        cd backend
        pipenv run flake8 .

  testing-action:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Using Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Pipenv
      run: |
        cd backend
        pip install pipenv

    - name: Install dependencies
      run: |
        cd backend
        pipenv install --dev

    - name: Test Job
      run: |
        cd backend
        pipenv run pytest

  deploy-action:
    runs-on: ubuntu-latest
    needs: [linting-action, testing-action]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Using Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Pipenv
      run: |
        cd backend
        pip install pipenv

    - name: Install dependencies
      run: |
        cd backend
        pipenv install --dev

    - name: Build
      env:
        REPOSITORY: backend-movie-picture
        IMAGE_TAG: latest
      run: |
        cd backend
        docker build -t $REPOSITORY .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get images
      run: docker images

    - name: Tag image
      env:
        REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        REPOSITORY: backend-movie-picture
        IMAGE_TAG: latest
      run: docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Push docker image to Amazon ECR
      env:
        REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        REPOSITORY: backend-movie-picture
        IMAGE_TAG: latest
      run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Config for EKS cluster
      env:
        REGION: ${{ secrets.AWS_REGION }}
        CLUSTER_NAME: movie-picture-cluster
      run: |
        aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME

    - name: Update image
      env:
        REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        REPOSITORY: backend-movie-picture
        IMAGE_TAG: latest
      run: |
        cd backend/k8s
        kustomize edit set image $REPOSITORY=$REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Deploy application to EKS cluster
      run: |
        cd backend/k8s
        kustomize build | kubectl apply -f -
